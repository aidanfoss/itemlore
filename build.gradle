plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

def supportedVersions = [
		"1.21.4": [
				yarn_mappings: "1.21.4+build.1",
				fabric_version: "0.119.3+1.21.4",
				midnightlib_version: "1.7.1+1.21.4-fabric",
				modmenu_version: "13.0.0-beta.1"
		],
		"1.21.5": [
				yarn_mappings: "1.21.5+build.1",
				fabric_version: "0.119.9+1.21.5",
				midnightlib_version: "1.7.1+1.21.4-fabric",
				modmenu_version: "14.0.0-rc.2"
		]
]

// Choose version (default to 1.21.5 if not set)
def mcVersion = project.hasProperty("minecraft_version") ? project.getProperty("minecraft_version") : "1.21.5"
def versionMeta = supportedVersions.get(mcVersion)

if (versionMeta == null) {
	throw new GradleException("Unsupported Minecraft version: ${mcVersion}")
}

version = "${project.mod_version}-${mcVersion}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven { url "https://maven.terraformersmc.com/" }
	maven { url "https://api.modrinth.com/maven" }
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	minecraft "com.mojang:minecraft:${mcVersion}"
	mappings "net.fabricmc:yarn:${versionMeta.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${versionMeta.fabric_version}"
	modImplementation include("maven.modrinth:midnightlib:${versionMeta.midnightlib_version}")
	modImplementation "com.terraformersmc:modmenu:${versionMeta.modmenu_version}"
}

processResources {
	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		// Define your publishing repo here if needed
	}
}

// Register run tasks for each version
supportedVersions.each { v, meta ->
	def suffix = v.replace(".", "_")
	def taskName = "runClient_${suffix}"

	loom.runs.create(taskName) {
		client()
		name = taskName
		vmArg "-Dminecraft_version=${v}"
		ideConfigGenerated = true
		runDir = "run/run_${suffix}"
	}
}
